function updateFee(fcode,fsched,fperiod,fqty,finvoice,pDuplicate,pFeeSeq)	{    if ( pDuplicate==null || pDuplicate.length==0 )        pDuplicate = "Y";    else        pDuplicate = pDuplicate.toUpperCase();    var invFeeFound=false;    var adjustedQty=fqty;    var feeSeq = null;	feeUpdated = false;	if(pFeeSeq == null)		getFeeResult = aa.finance.getFeeItemByFeeCode(capId,fcode,fperiod);	else		getFeeResult = aa.finance.getFeeItemByPK(capId,pFeeSeq);	if (getFeeResult.getSuccess())		{		if(pFeeSeq == null)			var feeList = getFeeResult.getOutput();		else		     {			var feeList = new Array();			feeList[0] = getFeeResult.getOutput();		     }		for (feeNum in feeList)			if (feeList[feeNum].getFeeitemStatus().equals("INVOICED"))				{                    if (pDuplicate=="Y")                        {                        logDebug("Invoiced fee "+fcode+" found, subtracting invoiced amount from update qty.");                        }                    else                        {                        invFeeFound=true;                        logDebug("Invoiced fee "+fcode+" found.  Not updating this fee. Not assessing new fee "+fcode);                        }				}		for (feeNum in feeList)			if (feeList[feeNum].getFeeitemStatus().equals("NEW") && !feeUpdated)				{				var feeSeq = feeList[feeNum].getFeeSeqNbr();				var editResult = aa.finance.editFeeItemUnit(capId, fqty, feeSeq);				feeUpdated = true;				if (editResult.getSuccess())					{					logDebug("Updated Qty on Existing Fee Item: " + fcode + " to Qty: " + fqty);					if (finvoice == "Y")						{						feeSeqList.push(feeSeq);						paymentPeriodList.push(fperiod);						}					}				else					{ logDebug( "**ERROR: updating qty on fee item (" + fcode + "): " + editResult.getErrorMessage()); break }				}		}	else		{ logDebug( "**ERROR: getting fee items (" + fcode + "): " + getFeeResult.getErrorMessage())}	if ( !feeUpdated && adjustedQty != 0 && (!invFeeFound || invFeeFound && pDuplicate=="Y") )		feeSeq = addFee(fcode,fsched,fperiod,adjustedQty,finvoice);	else		feeSeq = null;