function findDuplicateASIValues (callType, checkType, checkDesc, asiValue, dateCheck, beginDate, endDate, checkRelated) {	var selectString = "";	var parentCapId = "";	var parentAltId = "";	var childCapId = "";	var childAltId = "";	var relatedId = "";	var relatedAltId = "";		if (callType == "ASBCRCB") {		selectString = "DECLARE @UseDate varchar(10); SET @UseDate = '" + dateCheck + "'; SELECT TOP 1 COUNT(*) AS 'cnt' FROM B1PERMIT B " +		"INNER JOIN BCHCKBOX C ON B.SERV_PROV_CODE = C.SERV_PROV_CODE " +		"AND B.B1_PER_ID1 = C.B1_PER_ID1 AND B.B1_PER_ID2 = C.B1_PER_ID2 AND B.B1_PER_ID3 = C.B1_PER_ID3 AND C.B1_PER_TYPE = '" + appTypeArray[1] + 		"' AND C.B1_PER_SUB_TYPE = '" + appTypeArray[2] + "' AND C.B1_CHECKBOX_TYPE = '" + checkType + "' AND C.B1_CHECKBOX_DESC = '" + checkDesc + 		"' AND C.B1_CHECKLIST_COMMENT = '" + asiValue + "' LEFT OUTER JOIN B1_EXPIRATION E ON B.SERV_PROV_CODE = E.SERV_PROV_CODE " +		"AND B.B1_PER_ID1 = E.B1_PER_ID1 AND B.B1_PER_ID2 = E.B1_PER_ID2 AND B.B1_PER_ID3 = E.B1_PER_ID3 WHERE B.SERV_PROV_CODE = 'MADISON' " +		"AND (@UseDate = 'Expire' AND E.EXPIRATION_DATE BETWEEN '" + beginDate + " 00:00:00.000' AND '" + endDate + 		" 23:59:59.999') OR (@UseDate = 'File' AND B.B1_FILE_DD BETWEEN '" + beginDate + " 00:00:00.000' AND '" + endDate + " 23:59:59.999')";	} else {		c = aa.cap.getCap(capId).getOutput().getCapModel();		altId = c.getAltID();		if (checkRelated == true) {			var parentCapResult = aa.cap.getProjectByChildCapID(capId, "R", "");			var	parentSuccess = parentCapResult.getSuccess();			if (parentSuccess) {				parent = parentCapResult.getOutput();				parentCapId = parent[0].getProjectID();				var estCap = parentCapId.getID1();				estCap = estCap.substring(2, estCap.length());				if (estCap == "EST") {									} else {						pCap = aa.cap.getCap(parentCapId).getOutput().getCapModel();					parentAltId = pCap.getAltID();				}			} else {				parentCapResult = aa.cap.getProjectByChildCapID(capId, "Renewal", "");				parentSuccess = parentCapResult.getSuccess();				if (parentSuccess) {					parent = parentCapResult.getOutput();					parentCapId = parent[0].getProjectID();					var estCap = parentCapId.getID1();					estCap = estCap.substring(2, estCap.length());					if (estCap == "EST") {					} else {							pCap = aa.cap.getCap(parentCapId).getOutput().getCapModel();						parentAltId = pCap.getAltID();					}				} else {					parentCapResult = aa.cap.getProjectByChildCapID(capId, "Amendment", "");					parentSuccess = parentCapResult.getSuccess();					if (parentSuccess) {						parent = parentCapResult.getOutput();						parentCapId = parent[0].getProjectID();						var estCap = parentCapId.getID1();						estCap = estCap.substring(2, estCap.length());						if (estCap == "EST") {						} else {								pCap = aa.cap.getCap(parentCapId).getOutput().getCapModel();							parentAltId = pCap.getAltID();						}					} else {						parentCapId = capId;						parentAltId = capIDString;					}				}			}			var childCapResult = aa.cap.getProjectByMasterID(parentCapId, "", "");			var	childSuccess = childCapResult.getSuccess();			if (childSuccess) {				var childCapArray = childCapResult.getOutput();				if (childCapArray != 'undefined' && childCapArray != null){					relatedId = parentCapId + "', '";					relatedAltId = parentAltId + "', '";					for (childCap in childCapArray) {						child = childCapArray[childCap];						childCapId = child.getCapID();						var estCap = childCapId.getID1();						estCap = estCap.substring(2, estCap.length());						if (estCap == "EST") {													} else {								cCap = aa.cap.getCap(childCapId).getOutput().getCapModel();							childAltId = cCap.getAltID();							relatedId += childCapId + "', '";							relatedAltId += childAltId + "', '";						}					}					relatedId = relatedId.substring(0, relatedId.length - 4);					relatedAltId = relatedAltId.substring(0, relatedAltId.length - 4);				}			} else {				relatedId = parentCapId;				relatedAltId = capIDString;			}			selectString = "DECLARE @UseDate varchar(10); SET @UseDate = '" + dateCheck + "'; SELECT TOP 1 COUNT(*) AS 'cnt' FROM B1PERMIT B " +			"INNER JOIN BCHCKBOX C ON B.SERV_PROV_CODE = C.SERV_PROV_CODE " +			"AND B.B1_PER_ID1 = C.B1_PER_ID1 AND B.B1_PER_ID2 = C.B1_PER_ID2 AND B.B1_PER_ID3 = C.B1_PER_ID3 AND C.B1_PER_TYPE = '" + appTypeArray[1] + 			"' AND C.B1_PER_SUB_TYPE = '" + appTypeArray[2] + "' AND C.B1_CHECKBOX_TYPE = '" + checkType + "' AND C.B1_CHECKBOX_DESC = '" + checkDesc + 			"' AND C.B1_CHECKLIST_COMMENT = '" + asiValue + "' LEFT OUTER JOIN B1_EXPIRATION E ON B.SERV_PROV_CODE = E.SERV_PROV_CODE " +			"AND B.B1_PER_ID1 = E.B1_PER_ID1 AND B.B1_PER_ID2 = E.B1_PER_ID2 AND B.B1_PER_ID3 = E.B1_PER_ID3 WHERE B.SERV_PROV_CODE = 'MADISON' " +			"AND NOT (B.B1_PER_ID1 LIKE '%EST') AND NOT B.B1_ALT_ID IN ('" + relatedAltId + "') AND (@UseDate = 'Expire' AND E.EXPIRATION_DATE " + 			"BETWEEN '" + beginDate + " 00:00:00.000' AND '" + endDate + " 00:00:00.000') OR (@UseDate = 'File' AND B.B1_FILE_DD " +			"BETWEEN '" + beginDate + " 00:00:00.000' AND '" + endDate + " 00:00:00.000')";		} else {			selectString = "DECLARE @UseDate varchar(10); SET @UseDate = '" + dateCheck + "'; SELECT TOP 1 COUNT(*) AS 'cnt' FROM B1PERMIT B " +			"INNER JOIN BCHCKBOX C ON B.SERV_PROV_CODE = C.SERV_PROV_CODE " +			"AND B.B1_PER_ID1 = C.B1_PER_ID1 AND B.B1_PER_ID2 = C.B1_PER_ID2 AND B.B1_PER_ID3 = C.B1_PER_ID3 AND C.B1_PER_TYPE = '" + appTypeArray[1] + 			"' AND C.B1_PER_SUB_TYPE = '" + appTypeArray[2] + "' AND C.B1_CHECKBOX_TYPE = '" + checkType + "' AND C.B1_CHECKBOX_DESC = '" + checkDesc + 			"' AND C.B1_CHECKLIST_COMMENT = '" + asiValue + "' LEFT OUTER JOIN B1_EXPIRATION E ON B.SERV_PROV_CODE = E.SERV_PROV_CODE " +			"AND B.B1_PER_ID1 = E.B1_PER_ID1 AND B.B1_PER_ID2 = E.B1_PER_ID2 AND B.B1_PER_ID3 = E.B1_PER_ID3 WHERE B.SERV_PROV_CODE = 'MADISON' " +			"AND NOT B.B1_ALT_ID = '" + altId + "' AND (@UseDate = 'Expire' AND E.EXPIRATION_DATE BETWEEN '" + beginDate + " 00:00:00.000' AND '" + endDate + 			" 23:59:59.999') OR (@UseDate = 'File' AND B.B1_FILE_DD BETWEEN '" + beginDate + " 00:00:00.000' AND '" + endDate + " 23:59:59.999')";		}	}	var initialContext = aa.proxyInvoker.newInstance("javax.naming.InitialContext", null).getOutput();	var ds = initialContext.lookup("java:/AA");	var conn = ds.getConnection();	var sStmt = conn.prepareStatement(selectString);	var rSet = sStmt.executeQuery();	var retVal = 0;	while (rSet.next()) {		retVal = rSet.getString("cnt");	}	conn.close();	return retVal;}